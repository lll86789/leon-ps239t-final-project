}else{
pop <- pop[!grepl("新竹市|嘉義市", County), ]
for (i in nl2){
pop[grepl(i, County), ]$County <- substr(pop[grepl(i, County), ]$County, 1, 2)
}
}
pop <- dplyr::left_join(x = county_list, y = pop, by = c("County", "Sex"))
return(pop)
}
##計算現有的CCR，使用63-95年資料
calculateCCRTotal <- function(from, to){
CCR_total <- data.table()
for(k in from:to){
pop <- readPop(k)
setDF(pop)
pop2 <- readPop(k+5)
setDF(pop2)
CCR <- data.table(County = pop$County, Sex = pop$Sex)
for(i in 3:18){
ccr <- pop2[, c(i+1)]/pop[, c(i)]
CCR <- cbind(CCR, ccr)
names(CCR)[i] <- names(pop)[i]
}
CCR$c80 <- pop2[, c(20)]/(pop[, c(19)]+pop[, c(20)])
fer <- pop2
setDT(fer)
fer <- fer[Sex == "女", ]
fer <- fer[, .(FP = sum(c15to19, c20to24, c25to29, c30to34, c35to39, c40to44)), by = .(County)]
CCR$CWR <- pop2[, c(3)]/rep(fer$FP, each = 2)
CCR$year <- rep(k, nrow(CCR))
CCR_total <- rbind(CCR_total, CCR)
}
return(CCR_total)
}
CCR_total <- calculateCCRTotal(63, 92)
dd <- CCR_total[, 2:21][, lapply(.SD, mean), by = .(year, Sex)]
dd <- melt(data = dd, id = c("year", "Sex"))
dd <- dd[Sex == "女", ]
lab <- tapply(dd$value, dd$variable, last)
p1 <- ggplot() + geom_line(data = dd, aes(x = year, y = value,
group = variable, color = variable)) +
geom_text(aes(x = 93, y = lab, label = names(lab))) + theme_minimal()
png("C:/Data/paper/data/result/TimeSeriesOfCCR_Female.png", width = 720, height = 720)
p1
dev.off()
dd <- CCR_total[, 2:21][, lapply(.SD, mean), by = .(year, Sex)]
dd <- melt(data = dd, id = c("year", "Sex"))
dd <- dd[Sex == "男", ]
lab <- tapply(dd$value, dd$variable, last)
p2 <- ggplot() + geom_line(data = dd, aes(x = year, y = value,
group = variable, color = variable)) +
geom_text(aes(x = 93, y = lab, label = names(lab))) + theme_minimal()
png("C:/Data/paper/data/result/TimeSeriesOfCCR_Male.png", width = 720, height = 720)
p2
dev.off()
CCR_year_sex <- CCR_total[, 2:21][, lapply(.SD, mean), by = .(year, Sex)]
pop6392 <- data.table()
for (i in 63:92){
df <- readPop(i)
df$year <- rep(i, nrow(df))
pop6392 <- rbind(pop6392, df)
}
pop6392_1 <- pop6392[, 2:21][, lapply(.SD, sum), by = .(year, Sex)]
pop6392_1$c80to84 <- pop6392_1$c80to84 + pop6392_1$c85
pop6392_1$c85 <- NULL
pop6392_1$CWR <- rowSums(pop6392_1[, 6:11])
pop6392_2 <- data.table()
for (i in 63:92){
df <- county_list
df$year <- rep(i, nrow(df))
pop6392_2 <- rbind(pop6392_2, df)
}
pop6392_4 <- pop6392_1
pop6392_1 <- dplyr::left_join(x = pop6392_2, y = pop6392_1, by = c("year", "Sex"))
setDT(pop6392_1)
pop6392_2 <- pop6392
pop6392_2$c80to84 <- pop6392_2$c80to84 + pop6392_2$c85
pop6392_2$c85 <- NULL
pop6392_2$CWR <- rowSums(pop6392_2[, 6:11])
pop6392_2$year <- NULL
pop6392_3 <- pop6392_2[, 3:20]/pop6392_1[, 4:21]
CCR_year_sex <- cbind(CCR_total[, c(2, 21)], CCR_total[, 3:20]*pop6392_3)
CCR_year_sex <- CCR_year_sex[, lapply(.SD, sum), by = .(year, Sex)]
kk <- cbind(pop6392_4[, 3:6]/rowSums(pop6392_4[, 3:6]),
pop6392_4[, 7:14]/rowSums(pop6392_4[, 7:14]),
pop6392_4[, 15:17]/rowSums(pop6392_4[, 15:17]),
pop6392_4[, 18:19]/rowSums(pop6392_4[, 18:19]))
CCR_year_sex <- cbind(CCR_year_sex[, 1:2], CCR_year_sex[, 3:19]*kk, CCR_year_sex[, c(20)])
CCR_year_sex$Young <- rowSums(CCR_year_sex[, 3:6])
CCR_year_sex$Adult <- rowSums(CCR_year_sex[, 7:14])
CCR_year_sex$Old <- rowSums(CCR_year_sex[, 15:17])
CCR_year_sex$eOld <- rowSums(CCR_year_sex[, 18:19])
CCR_year_sex <- CCR_year_sex[, c(1:2, 20:24)]
####predict CCR
predCCR <- data.table()
sexlist <- unique(county_list$Sex)
counlist <- unique(county_list$County)
y=1
sam <- CCR_year_sex[Sex == sexlist[y], ]
sam
k=3
setDF(sam)
pretime <- data.table(Sex = rep(sam$Sex[1], 10))
sam[, c(k)]
model <- auto.arima(sam[, c(k)])
model
as.numeric(forecast(model,10)$mean)
runApp()
runApp()
runApp()
runApp()
c(list(1), list(2))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(pop_all)
pop_all[order(COUNTYNAME, Sex), ]
pop_all[order(COUNTYNAME, Sex, -Year), ]
pop_all[order(COUNTYNAME, Sex, Year), ]
?column
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?auto.arima
??auto.arima
runApp()
names(mappinglist)
trainedData <- lapply(names(mappinglist), FUN = function(x){
df <- mappinglist[[x]]
if (x %in% input$Datatype_model){
if (x == "Population"){
setDT(df)
df <- df[order(COUNTYNAME, Sex, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
Sexlist <- unique(df$Sex)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
sexDf <- data.table()
for (i in Sexlist){
arimaModel <-auto.arima(df[COUNTYNAME == y, Sex == i, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, Sex == i, ][, c(1:3, 22)], resDf)
sexDf <- rbind(sexDf, resDf)
}
return(sexDf)
}))
df <- trainedDf
}else {
setDT(df)
df <- df[order(COUNTYNAME, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
return(resDf)
}))
df <- trainedDf
}
}
return(df)
})
trainedData <- lapply(names(mappinglist), FUN = function(x){
df <- mappinglist[[x]]
if (x %in% c("Population")){
if (x == "Population"){
setDT(df)
df <- df[order(COUNTYNAME, Sex, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
Sexlist <- unique(df$Sex)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
sexDf <- data.table()
for (i in Sexlist){
arimaModel <-auto.arima(df[COUNTYNAME == y, Sex == i, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, Sex == i, ][, c(1:3, 22)], resDf)
sexDf <- rbind(sexDf, resDf)
}
return(sexDf)
}))
df <- trainedDf
}else {
setDT(df)
df <- df[order(COUNTYNAME, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
return(resDf)
}))
df <- trainedDf
}
}
return(df)
})
x=names(mappinglist)[1]
df <- mappinglist[[x]]
df
setDT(df)
df <- df[order(COUNTYNAME, Sex, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
Sexlist <- unique(df$Sex)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
sexDf <- data.table()
for (i in Sexlist){
arimaModel <-auto.arima(df[COUNTYNAME == y, Sex == i, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, Sex == i, ][, c(1:3, 22)], resDf)
sexDf <- rbind(sexDf, resDf)
}
return(sexDf)
}))
y=Countynamelist[1]
sexDf <- data.table()
for (i in Sexlist){
arimaModel <-auto.arima(df[COUNTYNAME == y, Sex == i, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, Sex == i, ][, c(1:3, 22)], resDf)
sexDf <- rbind(sexDf, resDf)
}
i=Sexlist[1]
arimaModel <-auto.arima(df[COUNTYNAME == y, Sex == i, ]$Total_pop)
df[COUNTYNAME == y, Sex == i, ]$Total_pop
df[COUNTYNAME == y, Sex == i, ]
arimaModel <-auto.arima(df[COUNTYNAME == y& Sex == i, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
results <- as.numeric(forecast(arimaModel, 10)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10),
Total_pop = results)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10),
Total_pop = results)
resDf
resDf <- rbind(df[COUNTYNAME == y, Sex == i, ][, c(1:3, 22)], resDf)
resDf <- rbind(df[COUNTYNAME == y& Sex == i, ][, c(1:3, 22)], resDf)
sexDf <- rbind(sexDf, resDf)
trainedData <- lapply(names(mappinglist), FUN = function(x){
df <- mappinglist[[x]]
if (x %in% c("Population")){
if (x == "Population"){
setDT(df)
df <- df[order(COUNTYNAME, Sex, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
Sexlist <- unique(df$Sex)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
sexDf <- data.table()
for (i in Sexlist){
arimaModel <-auto.arima(df[COUNTYNAME == y& Sex == i, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, 10)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y& Sex == i, ][, c(1:3, 22)], resDf)
sexDf <- rbind(sexDf, resDf)
}
return(sexDf)
}))
df <- trainedDf
}else {
setDT(df)
df <- df[order(COUNTYNAME, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
return(resDf)
}))
df <- trainedDf
}
}
return(df)
})
trainedData
runApp()
runApp()
x=names(mappinglist)[3]
x
df <- mappinglist[[x]]
setDT(df)
df <- df[order(COUNTYNAME, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
return(resDf)
}))
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, 10)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
return(resDf)
}))
y=Countynamelist[1]
arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, 10)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
df[COUNTYNAME == y, ]
arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, 10)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
runApp()
runApp()
View(resDf)
trainedData <- lapply(names(mappinglist), FUN = function(x){
df <- mappinglist[[x]]
if (x %in% c("Population")){
if (x == "Population"){
setDT(df)
df <- df[order(COUNTYNAME, Sex, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
Sexlist <- unique(df$Sex)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
sexDf <- data.table()
for (i in Sexlist){
arimaModel <-auto.arima(df[COUNTYNAME == y& Sex == i, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, 10)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y& Sex == i, ][, c(1:3, 22)], resDf)
sexDf <- rbind(sexDf, resDf)
}
return(sexDf)
}))
df <- trainedDf
}else {
setDT(df)
df <- df[order(COUNTYNAME, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
results <- as.numeric(forecast(arimaModel, 10)$mean)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Total_pop = results)
resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
return(resDf)
}))
df <- trainedDf
}
}
return(df)
})
View(trainedData)
names(trainedData)
names(trainedData) <- names(mappinglist)
names(trainedData)
trainedData[["Population"]]
runApp()
runApp()
runApp()
runApp()
auto.arima(pop_all[, c(5:10)])
str(pop_all)
pop_all[, "c85"]
pop_all[, names(pop_all)[4:10]]
pop_all[, 2:5]
pop_all[, c(names(pop_all)[4:10])]
x="c85"
pop_all[, x]
pop_all[, "c85"]
setDF(pop_all)
pop_all[, x]
auto.arima(1:10)
cbind(list(1:5), list(6:10))
list(1:5)
data.frame(list(1:5), list(6:10))
rowSums(data.frame(list(1:5), list(6:10)))
runApp()
x=names(mappinglist)[1]
df <- mappinglist[[x]]
setDT(df)
df <- df[order(COUNTYNAME, Sex, Year), ]
Countynamelist <- unique(df$COUNTYNAME)
Sexlist <- unique(df$Sex)
y=Countynamelist[1]
sexDf <- data.table()
i=Sexlist[1]
trainingData <- df[COUNTYNAME == y& Sex == i, ]
setDF(trainingData)
resultslist <- data.frame(lapply(names(trainingData)[4:21], FUN = function(k){
arimaModel <- auto.arima(trainedData[, k])
results <- as.numeric(forecast(arimaModel, 10)$mean)
return(results)
}))
k=names(trainingData)[4]
arimaModel <- auto.arima(trainedData[, k])
k
trainedData[, k]
arimaModel <- auto.arima(trainingData[, k])
results <- as.numeric(forecast(arimaModel, 10)$mean)
return(results)
results
results <- round(as.numeric(forecast(arimaModel, 10)$mean), 0)
results
runApp()
names(resultslist) <- names(trainingData)[4:21]
resultslist <- data.frame(lapply(names(trainingData)[4:21], FUN = function(k){
arimaModel <- auto.arima(trainingData[, k])
results <- round(as.numeric(forecast(arimaModel, 10)$mean), 0)
return(results)
}))
names(resultslist) <- names(trainingData)[4:21]
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear))
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10))
View(resDf)
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)),
COUNTYNAME = rep(y, input$trainyear),
Sex = rep(i, input$trainyear))
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10))
i=Sexlist[1]
resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + 10)),
COUNTYNAME = rep(y, 10),
Sex = rep(i, 10))
View(resDf)
resDf <- cbind(resDf, resultslist)
View(resDf)
resDF$Total_pop <- rowSums(resultslist)
resDf$Total_pop <- rowSums(resultslist)
resDf <- rbind(df[COUNTYNAME == y& Sex == i, ], resDf)
sexDf <- rbind(sexDf, resDf)
sexDf
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?installed.packages
installed.packages(RColorBrewer)
installed.packages("RColorBrewer")
install.packages("RColorBrewer")
runApp()
shiny::runApp()
