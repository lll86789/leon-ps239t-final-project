observeEvent(input$modeltrain, {
  if (input$model == "Auto ARIMA"){
    modelData <- reactive({
      trainedData <- lapply(names(uploadedData()), FUN = function(x){
        df <- uploadedData()[[x]]
        if (x %in% input$Datatype_model){
          if (x == "Population"){
            setDT(df)
            df <- df[order(COUNTYNAME, Sex, Year), ]
            Countynamelist <- unique(df$COUNTYNAME)
            Sexlist <- unique(df$Sex)
            trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
              sexDf <- data.table()
              for (i in Sexlist){
                arimaModel <-auto.arima(df[COUNTYNAME == y, Sex == i, ]$Total_pop)
                results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
                resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)), 
                                    COUNTYNAME = rep(y, input$trainyear), 
                                    Sex = rep(i, input$trainyear), 
                                    Total_pop = results)
                resDf <- rbind(df[COUNTYNAME == y, Sex == i, ][, c(1:3, 22)], resDf)
                sexDf <- rbind(sexDf, resDf)
              }
              return(sexDf)
            }))
            df <- trainedDf
            
          }else {
            setDT(df)
            df <- df[order(COUNTYNAME, Year), ]
            Countynamelist <- unique(df$COUNTYNAME)
            trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
              arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
              results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
              resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)), 
                                  COUNTYNAME = rep(y, input$trainyear), 
                                  Sex = rep(i, input$trainyear), 
                                  Total_pop = results)
              resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
              return(resDf)
            }))
            df <- trainedDf
          }
        }
        return(df)
      })
      return(trainedData)
    })
  }else {
    modelData <- reactive({
      return(uploadedData())
    })
  }
})



















modelData <- reactive({
  if(is.null(input$modeltrain)){
    return(uploadedData())
  }else {
    if (input$model == "Auto ARIMA"){
      trainedData <- lapply(names(uploadedData()), FUN = function(x){
        df <- uploadedData()[[x]]
        if (x %in% input$Datatype_model){
          if (x == "Population"){
            setDT(df)
            df <- df[order(COUNTYNAME, Sex, Year), ]
            Countynamelist <- unique(df$COUNTYNAME)
            Sexlist <- unique(df$Sex)
            trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
              sexDf <- data.table()
              for (i in Sexlist){
                arimaModel <-auto.arima(df[COUNTYNAME == y, Sex == i, ]$Total_pop)
                results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
                resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)), 
                                    COUNTYNAME = rep(y, input$trainyear), 
                                    Sex = rep(i, input$trainyear), 
                                    Total_pop = results)
                resDf <- rbind(df[COUNTYNAME == y, Sex == i, ][, c(1:3, 22)], resDf)
                sexDf <- rbind(sexDf, resDf)
              }
              return(sexDf)
            }))
            df <- trainedDf
            
          }else {
            setDT(df)
            df <- df[order(COUNTYNAME, Year), ]
            Countynamelist <- unique(df$COUNTYNAME)
            trainedDf <- rbindlist(lapply(Countynamelist, FUN = function(y){
              arimaModel <-auto.arima(df[COUNTYNAME == y, ]$Total_pop)
              results <- as.numeric(forecast(arimaModel, input$trainyear)$mean)
              resDf <- data.table(Year = c((max(df$Year) + 1):(max(df$Year) + input$trainyear)), 
                                  COUNTYNAME = rep(y, input$trainyear), 
                                  Sex = rep(i, input$trainyear), 
                                  Total_pop = results)
              resDf <- rbind(df[COUNTYNAME == y, ][, c(1:3)], resDf)
              return(resDf)
            }))
            df <- trainedDf
          }
        }
        return(df)
      })
      return(trainedData)
    }else {
      return(uploadedData())
    }
    
  }
})


names(trainedData) <- names(mappinglist)
trainedData[["Population"]]
